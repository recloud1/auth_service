"""base_models

Revision ID: 253065507371
Revises: 72b53600c061
Create Date: 2022-10-21 21:58:23.804824

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '253065507371'
down_revision = '72b53600c061'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA roles')
    op.execute('CREATE SCHEMA users')

    op.create_table(
        'roles',
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.Column(
            'id',
            postgresql.UUID(),
            server_default='487e9fdd-9955-40eb-90fe-755a00d061e6',
            nullable=False
        ),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('description', sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
        schema='roles'
    )
    op.create_table(
        'role_permissions',
        sa.Column(
            'id',
            postgresql.UUID(),
            server_default='40990965-e1fb-4b49-acf4-2f3d093d6509',
            nullable=False
        ),
        sa.Column('permission', sa.String(length=512), nullable=False),
        sa.Column('role_id', postgresql.UUID(), nullable=False),
        sa.Column('created_by', postgresql.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['role_id'],
            ['roles.roles.id'],
            name=op.f('fk_role_permissions_role_id_roles')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_role_permissions')),
        sa.UniqueConstraint('permission', name=op.f('uq_role_permissions_permission')),
        schema='roles'
    )
    op.create_index(
        op.f('ix_roles_role_permissions_role_id'),
        'role_permissions',
        ['role_id'],
        unique=False,
        schema='roles'
    )
    op.create_table(
        'users',
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.Column(
            'id',
            postgresql.UUID(),
            server_default='960c56ea-22b0-4873-aec3-705b9e975552',
            nullable=False
        ),
        sa.Column('role_id', postgresql.UUID(), nullable=False),
        sa.Column('login', sa.String(length=128), nullable=True),
        sa.Column('email', sa.String(length=256), nullable=False),
        sa.Column('password', sa.String(length=256), nullable=False),
        sa.Column('first_name', sa.Text(), nullable=True),
        sa.Column('last_name', sa.Text(), nullable=True),
        sa.Column('middle_name', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['role_id'], ['roles.roles.id'], name=op.f('fk_users_role_id_roles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
        sa.UniqueConstraint('email', name=op.f('uq_users_email')),
        sa.UniqueConstraint('login', name=op.f('uq_users_login')),
        schema='users'
    )
    op.create_table(
        'user_login_histories',
        sa.Column(
            'id',
            postgresql.UUID(),
            server_default='2aabb4ed-28f5-4d08-b763-02014b589b7d',
            nullable=False
        ),
        sa.Column('user_id', postgresql.UUID(), nullable=False),
        sa.Column('ip', sa.Text(), nullable=True),
        sa.Column('fingerprint', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['users.users.id'],
            name=op.f('fk_user_login_histories_user_id_users'),
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_user_login_histories')),
        schema='users'
    )
    op.create_index(
        op.f('ix_users_user_login_histories_user_id'),
        'user_login_histories',
        ['user_id'],
        unique=False,
        schema='users'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f('ix_users_user_login_histories_user_id'),
        table_name='user_login_histories',
        schema='users'
    )
    op.drop_table('user_login_histories', schema='users')
    op.drop_table('users', schema='users')
    op.drop_index(op.f('ix_roles_role_permissions_role_id'), table_name='role_permissions', schema='roles')
    op.drop_table('role_permissions', schema='roles')
    op.drop_table('roles', schema='roles')

    op.execute('DROP SCHEMA roles')
    op.execute('DROP SCHEMA users')
    # ### end Alembic commands ###
