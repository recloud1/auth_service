version: '3.7'

services:
  postgres:
    container_name: 'auth_test_service_db'
    image: 'postgres:12.0-alpine'
    restart: on-failure
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_DB=${TEST_DB_NAME}
    env_file:
      - .env
    volumes:
      - auth_service_data:/var/lib/postgresql/data
    networks:
      - auth_service
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready' ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: 'auth_test_redis_service'
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_PASSWORD=${TEST_REDIS_PASSWORD}
      - REDIS_AOF_ENABLED=no
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - ${TEST_REDIS_PORT}:6379
    networks:
      - testing_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 50

  web:
    build: ../../
    image: api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${TEST_REDIS_PASSWORD}
    ports:
      - ${TEST_API_PORT}:8000
    depends_on:
      - redis
    networks:
      - testing_network

  pytest:
    container_name: 'auth_service_pytest'
    build:
      context: .
      dockerfile: ./Dockerfile
    env_file:
      - ./.env
    environment:
      - TEST_POSTGRES_HOST=postgres
      - TEST_POSTGRES_PORT=5432
      - TEST_REDIS_HOST=redis
      - TEST_REDIS_PORT=6379
      - TEST_API_HOST=web
      - TEST_API_PORT=8000
    networks:
      - testing_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started


networks:
  testing_network: